{"version":3,"sources":["assets/logo_00.svg","assets/logo_01.svg","assets/logo_02.svg","assets/logo_03.svg","assets/logo_04.svg","assets/logo_05.svg","assets/logo_06.svg","assets/logo_07.svg","assets/logo_08.svg","assets/logo_09.svg","assets/logo_10.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","logoFrames","logo0","logo1","logo2","logo3","logo4","logo5","logo6","logo7","logo8","logo9","logo10","animationProgressDelta","reduce","a","b","App","useState","frame","setFrame","useEffect","handler","window","setTimeout","f","length","cancelAnimationFrame","logoFrameElements","map","index","srcUrl","key","src","style","display","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,qVCcrCC,G,MAAmC,CACvC,CAAEC,IAAO,GACT,CAAEC,IAAO,KACT,CAAEC,IAAO,GACT,CAAEC,IAAO,GACT,CAAEC,IAAO,GACT,CAAEC,IAAO,GACT,CAAEC,IAAO,GACT,CAAEC,IAAO,GACT,CAAEC,IAAO,GACT,CAAEC,IAAO,GACT,CAAEC,IAAQ,KAKNC,EAFoB,IACDZ,EAAWa,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAE,KAAI,GA6BhDC,MA1Bf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACPC,EADO,KACAC,EADA,KAGbC,qBAAU,WACR,IAAIC,EAAUC,OAAOC,YAAW,WAC9BJ,GAAS,SAAAK,GAAC,OAAKA,EAAI,GAAKxB,EAAWyB,YAClCzB,EAAWkB,GAAO,GAAKN,GAE1B,OAAO,kBAAMc,qBAAqBL,MACjC,CAAEH,IAEL,IAAMS,EAAoB3B,EAAW4B,KAAI,WAAqBC,GAArB,uBAAGC,EAAH,iBACvC,yBAAKC,IAAKF,EAAOG,IAAKF,EAAQG,MAAO,CAAEC,QAASL,IAAUX,EAAQ,QAAU,aAG9E,OACE,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,YACXR,MCvCQS,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1e7a7056.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_00.84b9229c.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_01.abc68502.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_02.b16f2516.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_03.bb533b17.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_04.dec4b2f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_05.a79fdca3.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_06.e5ed06fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_07.61259a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_08.1f90a9ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_09.13f33cc2.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_10.c1e831ec.svg\";","import React, { useState, useEffect } from 'react';\nimport logo0 from './assets/logo_00.svg';\nimport logo1 from './assets/logo_01.svg';\nimport logo2 from './assets/logo_02.svg';\nimport logo3 from './assets/logo_03.svg';\nimport logo4 from './assets/logo_04.svg';\nimport logo5 from './assets/logo_05.svg';\nimport logo6 from './assets/logo_06.svg';\nimport logo7 from './assets/logo_07.svg';\nimport logo8 from './assets/logo_08.svg';\nimport logo9 from './assets/logo_09.svg';\nimport logo10 from './assets/logo_10.svg';\nimport './App.scss';\n\nconst logoFrames: [ string, number ][] = [\n  [ logo0, 2 ],\n  [ logo1, 1.5 ],\n  [ logo2, 1 ],\n  [ logo3, 1 ],\n  [ logo4, 1 ],\n  [ logo5, 1 ],\n  [ logo6, 1 ],\n  [ logo7, 1 ],\n  [ logo8, 1 ],\n  [ logo9, 2 ],\n  [ logo10, 3 ],\n];\n\nconst animationDuration = 1000;\nconst animationTimeSum = logoFrames.reduce((a, b) => a + b[1], 0);\nconst animationProgressDelta = animationDuration / animationTimeSum;\n\nfunction App() {\n  let [ frame, setFrame ] = useState(0);\n\n  useEffect(() => {\n    let handler = window.setTimeout(() => {\n      setFrame(f => (f + 1) % logoFrames.length);\n    }, logoFrames[frame][1] * animationProgressDelta);\n\n    return () => cancelAnimationFrame(handler);\n  }, [ frame ]);\n\n  const logoFrameElements = logoFrames.map(([ srcUrl, timing ], index) => (\n    <img key={index} src={srcUrl} style={{ display: index === frame ? 'block' : 'none' }}></img>\n  ));\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-logo\">\n          { logoFrameElements }\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}